#if( $union.packageLine )
package $union.packageLine.name;
#end

#foreach( $importLine in $union.importLines )
import#if( $importLine.static ) static#end $importLine.pattern;
#end
import java.util.Objects;
import java.util.Arrays;
import java.util.function.Function;
import java.util.function.Supplier;

#set( $tp = $util.toTypeParameterCode($union.typeParameters) )
#set( $ta = $util.toTypeArgumentsCode($union.typeParameters) )
#set( $d = "$" )
#foreach( $annotation in $union.annotations )
@${annotation.type}#if( !$annotation.elements.empty )(${annotation.elements})#end
#end
public abstract class $union.typeName#if( !$tp.empty )<$tp>#end {
    #foreach( $product in $union.productTypes )
    #parse("ProductTemplate.vm")

    #end
    #parse("SwitchInterface.vm")

    #parse("SwitchBuilderInterface.vm")

    #parse("SwitchBuilderCaseImpl.vm")

    #parse("SwitchBuilderTerminalImpl.vm")

    ${union.typeName}() { }

    public abstract ${union.typeName}#if( !$ta.empty )<$ta>#end copy();

    public abstract <${d}T> ${d}T when(Switch#if( !$ta.empty )<${d}T, $ta>#else<${d}T>#end cases);

    public <${d}T> CaseSwitchBuilder#if( !$ta.empty )<${d}T, $ta>#else<${d}T>#end switchBuilder() {
        return new CaseSwitchBuilder<>(this);
    }
}