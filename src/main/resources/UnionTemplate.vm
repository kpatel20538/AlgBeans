#parse("Macros.vm")
#if( $union.packageLine )
package $union.packageLine.name;
#end

#foreach( $importLine in $union.importLines )
import#if( $importLine.static ) static#end $importLine.pattern;
#end
import java.util.Objects;
import java.util.Arrays;
import java.util.function.Function;
import java.util.function.Supplier;

#foreach( $annotation in $union.annotations )
$annotation
#end
public abstract class #typeDeclaration($union.typeName) {
    #foreach( $product in $union.productTypes )
    #parse("ProductTemplate.vm")

    #end
    #parse("SwitchInterface.vm")

    #parse("SwitchBuilderInterface.vm")

    #parse("SwitchBuilderCaseImpl.vm")

    #parse("SwitchBuilderTerminalImpl.vm")

    ${union.typeName}() { }

    public abstract #typeInstance($union.typeName) copy();

    public abstract <$gt> $gt when(#genericTypeInstance("Switch" $gt) cases);

    public <$gt> #genericTypeInstance("CaseSwitchBuilder" $gt) switchBuilder() {
        return new CaseSwitchBuilder<>(this);
    }
}