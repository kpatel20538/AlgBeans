    public static final class #genericTypeDeclaration("TerminalSwitchBuilder" $gt) implements #genericTypeInstance("SwitchBuilder" $gt) {
        private final #genericTypeInstance("SwitchBuilder" $gt) switchBuilder;
        private final Supplier<$gt> orElse;

        TerminalSwitchBuilder(#genericTypeInstance("SwitchBuilder" $gt) switchBuilder, Supplier<$gt> orElse) {
            if (orElse == null) {
                throw new NullPointerException();
            }
            this.switchBuilder = switchBuilder;
            this.orElse = orElse;
        }

        private <$gr> Function<$gr, $gt> ensureFunction(Function<$gr, $gt> func) {
            return func != null ? func : it -> orElse.get();
        }

        @Override
        public #typeInstance($union.typeName) getValue() {
            return switchBuilder.getValue();
        }

        #foreach( $product in $union.productTypes )
        @Override
        public Function<#typeInstance($product.typeName), $T> #bGetterName($product)() {
            return ensureFunction(switchBuilder.#bGetterName($product)());
        }

        #end
    }