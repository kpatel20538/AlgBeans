    public static final class TerminalSwitchBuilder#if( !$tp.empty )<${d}T, $tp>#else<${d}T>#end implements SwitchBuilder#if( !$ta.empty )<${d}T, $ta>#else<${d}T>#end {
        private final SwitchBuilder#if( !$ta.empty )<${d}T, $ta>#else<${d}T>#end switchBuilder;
        private final Supplier<$T> orElse;
        TerminalSwitchBuilder(SwitchBuilder#if( !$ta.empty )<${d}T, $ta>#else<${d}T>#end switchBuilder, Supplier<$T> orElse) {
            if (orElse == null) {
                throw new NullPointerException();
            }
            this.switchBuilder = switchBuilder;
            this.orElse = orElse;
        }

        private <$R> Function<$R, $T> ensureFunction(Function<$R, $T> func) {
            return func != null ? func : it -> orElse.get();
        }

        @Override
        public $union.typeName#if( !$ta.empty )<$ta>#end getValue() {
            return switchBuilder.getValue();
        }

        #foreach( $product in $union.productTypes )
        @Override
        public Function<$product.typeName#if( !$ta.empty )<$ta>#end, $T> ${util.toSwitchGetterName($product)}() {
            return ensureFunction(switchBuilder.${util.toSwitchGetterName($product)}());
        }

        #end
    }