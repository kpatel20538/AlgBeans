    public static final class #genericTypeDeclaration("CaseSwitchBuilder" $gt) implements #genericTypeInstance("SwitchBuilder" $gt){
        private final #typeInstance($union.typeName) value;
        #foreach( $product in $union.productTypes )
        private Function<#typeInstance($product.typeName),$gt> #bSetterName($product);
        #end

        CaseSwitchBuilder(#typeInstance($union.typeName) value) {
            this.value = value;
            #foreach( $product in $union.productTypes )
            this.#bSetterName($product) = null;
            #end
        }

        @Override
        public #typeInstance($union.typeName) getValue() {
            return value;
        }

        #foreach( $product in $union.productTypes )
        public Function<#typeInstance($product.typeName),$gt> #bGetterName($product)() {
            if (#bSetterName($product) != null) {
                return #bSetterName($product);
            } else {
                throw new NullPointerException();
            }
        }

        #end
        #foreach( $product in $union.productTypes )
        public #genericTypeInstance("CaseSwitchBuilder" $gt) #bSetterName($product)(Function<#typeInstance($product.typeName),$gt> #bSetterName($product)) {
            this.#bSetterName($product) = #bSetterName($product);
            return this;
        }

        #end
        #foreach( $product in $union.productTypes )
        public #genericTypeInstance("CaseSwitchBuilder" $gt) #bSetterName($product)(Supplier<$gt> #bSetterName($product)) {
            this.#bSetterName($product) = it ->#bSetterName($product).get();
            return this;
        }

        #end
        #foreach( $product in $union.productTypes )
        public #genericTypeInstance("CaseSwitchBuilder" $gt) #bSetterName($product)($gt #bSetterName($product)) {
            this.#bSetterName($product)= it -> #bSetterName($product);
            return this;
        }

        #end
        public #genericTypeInstance("TerminalSwitchBuilder" $gt) orElse(Supplier<$gt> orElse) {
            return new TerminalSwitchBuilder<>(this, orElse);
        }

        public #genericTypeInstance("TerminalSwitchBuilder" $gt) orElse($gt orElse) {
            return new TerminalSwitchBuilder<>(this, () -> orElse);
        }
    }